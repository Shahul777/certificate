@RestController
@RequestMapping("/api/payment")
public class PaymentController {

    @PostMapping("/process")
    public ResponseEntity<String> processPayment(@RequestBody PaymentRequest paymentRequest) {
        // Extract payment details from the PaymentRequest object
        String cardNumber = paymentRequest.getCardNumber();
        String expiryDate = paymentRequest.getExpiryDate();
        String cvv = paymentRequest.getCvv();
        
        // Validate payment details (implement your validation logic here)
        if (!isValidCardNumber(cardNumber) || !isValidExpiryDate(expiryDate) || !isValidCvv(cvv)) {
            return ResponseEntity.badRequest().body("Invalid payment details.");
        }

        // Call your payment service to handle the actual payment processing using a payment gateway
        // Replace the following line with the actual payment processing logic
        boolean paymentSuccess = processPaymentWithPaymentGateway(cardNumber, expiryDate, cvv);

        if (paymentSuccess) {
            // If payment is successful, perform further actions (e.g., save transaction, update user balance, etc.)
            // Replace the following line with the relevant logic
            saveTransactionToDatabase(paymentRequest);
            
            return ResponseEntity.ok("Payment successful.");
        } else {
            // Handle payment failure
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Payment failed.");
        }
    }

    // Implement your own validation methods
    private boolean isValidCardNumber(String cardNumber) {
        // Add validation logic here
        return true;
    }

    private boolean isValidExpiryDate(String expiryDate) {
        // Add validation logic here
        return true;
    }

    private boolean isValidCvv(String cvv) {
        // Add validation logic here
        return true;
    }

    // Replace this method with the actual payment processing logic using a payment gateway
    private boolean processPaymentWithPaymentGateway(String cardNumber, String expiryDate, String cvv) {
        // Add the integration code with the payment gateway here
        // This method should return true if the payment is successful, false otherwise
        return true;
    }

    // Replace this method with the actual logic to save the transaction to the database
    private void saveTransactionToDatabase(PaymentRequest paymentRequest) {
        // Implement the logic to save the transaction to your database (if needed)
    }
}



,................

<dependency>
    <groupId>com.stripe</groupId>
    <artifactId>stripe-java</artifactId>
    <version>20.81.0</version>
</dependency>
.......

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Charge;

public class PaymentService {

    private static final String STRIPE_SECRET_KEY = "your_stripe_secret_key_here"; // Replace with your Stripe secret key

    public boolean processPaymentWithPaymentGateway(String cardNumber, String expiryDate, String cvv) {
        try {
            // Set your Stripe secret key
            Stripe.apiKey = STRIPE_SECRET_KEY;

            // Create a Stripe Charge object with the payment details
            Charge charge = Charge.create(
                    new ChargeCreateParamsBuilder()
                            .setAmount(1000) // Amount in cents (e.g., $10.00)
                            .setCurrency("usd")
                            .setSource(createCardToken(cardNumber, expiryDate, cvv))
                            .setDescription("Sample payment")
                            .build()
            );

            // Check if the payment was successful
            return "succeeded".equals(charge.getStatus());
        } catch (StripeException e) {
            // Handle any exceptions that occurred during payment processing
            e.printStackTrace();
            return false;
        }
    }

    // Helper method to create a card token using Stripe Elements
    private String createCardToken(String cardNumber, String expiryDate, String cvv) {
        // In a real application, you would use Stripe Elements or Checkout to securely tokenize card information
        // For this example, we are simplifying by creating a dummy token directly from the card details
        // Note: This is not recommended for production; you should use Stripe Elements or Checkout for secure tokenization.
        return "tok_visa"; // Replace with the actual token generated by Stripe Elements or Checkout
    }
}
..........

<script src="https://js.stripe.com/v3/"></script>
.........

<form id="payment-form">
  <div id="card-element">
    <!-- A Stripe Element will be inserted here. -->
  </div>
  <!-- Used to display Element errors. -->
  <div id="card-errors" role="alert"></div>

  <button type="submit">Submit Payment</button>
</form>

..........
<script>
  // Initialize Stripe.js
  var stripe = Stripe('your_publishable_key_here'); // Replace with your Stripe publishable key

  // Create an instance of Elements
  var elements = stripe.elements();

  // Create an instance of the card Element
  var cardElement = elements.create('card');

  // Add an instance of the card Element into the `card-element` div
  cardElement.mount('#card-element');

  // Handle form submission
  var form = document.getElementById('payment-form');

  form.addEventListener('submit', function(event) {
    event.preventDefault();

    stripe.createToken(cardElement).then(function(result) {
      if (result.error) {
        // Display error messages to the user
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
      } else {
        // Token successfully created, handle the token (e.g., send it to your server for payment processing)
        var token = result.token;
        // Send the token to your server for payment processing (AJAX request, etc.)
        // Example:
        // fetch('/process-payment', {
        //   method: 'POST',
        //   body: JSON.stringify({ token: token.id }),
        //   headers: {
        //     'Content-Type': 'application/json'
        //   }
        // }).then(function(response) {
        //   // Handle the response from your server
        //   // Redirect, show success message, etc.
        // }).catch(function(error) {
        //   // Handle any errors that occurred during the payment processing
        // });
      }
    });
  });
</script>

...........

. Stripe Checkout:

Stripe Checkout is a pre-built, hosted payment page that you can redirect your customers to for payment processing. Stripe handles the entire payment flow, and you don't have to worry about handling sensitive payment data. Here's how to use Stripe Checkout:
<button id="checkout-button">Pay with Card</button>
....
<script>
  // Initialize Stripe.js
  var stripe = Stripe('your_publishable_key_here'); // Replace with your Stripe publishable key

  // Handle payment button click
  var checkoutButton = document.getElementById('checkout-button');
  checkoutButton.addEventListener('click', function() {
    // Create a checkout session on the server and redirect the customer to Stripe Checkout
    // Example:
    // fetch('/create-checkout-session', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json'
    //   }
    // }).then(function(response) {
    //   return response.json();
    // }).then(function(session) {
    //   return stripe.redirectToCheckout({ sessionId: session.id });
    // }).then(function(result) {
    //   // If `redirectToCheckout` fails, display an error message to the customer
    // });
  });
</script>


.......
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.checkout.Session;
import com.stripe.param.checkout.SessionCreateParams;

public class CheckoutService {

    private static final String STRIPE_SECRET_KEY = "your_stripe_secret_key_here"; // Replace with your Stripe secret key

    public String createCheckoutSession() {
        try {
            // Set your Stripe secret key
            Stripe.apiKey = STRIPE_SECRET_KEY;

            // Create a Checkout Session
            SessionCreateParams params = SessionCreateParams.builder()
                    .addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD)
                    .addLineItem(
                            SessionCreateParams.LineItem.builder()
                                    .setPriceData(
                                            SessionCreateParams.LineItem.PriceData.builder()
                                                    .setCurrency("usd")
                                                    .setProductData(
                                                            SessionCreateParams.LineItem.PriceData.ProductData.builder()
                                                                    .setName("Product Name")
                                                                    .build()
                                                    )
                                                    .setUnitAmount(1000) // Amount in cents (e.g., $10.00)
                                                    .build()
                                    )
                                    .setQuantity(1)
                                    .build()
                    )
                    .setMode(SessionCreateParams.Mode.PAYMENT)
                    .setSuccessUrl("https://your_website.com/success")
                    .setCancelUrl("https://your_website.com/cancel")
                    .build();

            Session session = Session.create(params);

            return session.getId(); // Return the session ID to the client-side to redirect to Stripe Checkout
        } catch (StripeException e) {
            // Handle any exceptions that occurred during Checkout Session creation
            e.printStackTrace();
            return null;
        }
    }
}

.........
// Handle payment button click
var checkoutButton = document.getElementById('checkout-button');
checkoutButton.addEventListener('click', function() {
  // Make an API call to your server to create the Checkout Session
  fetch('/create-checkout-session', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    }
  })
  .then(function(response) {
    return response.json();
  })
  .then(function(data) {
    // Use the Checkout Session ID to redirect the customer to Stripe Checkout
    stripe.redirectToCheckout({ sessionId: data.sessionId })
    .then(function(result) {
      // If `redirectToCheckout` fails, display an error message to the customer
    });
  });
});

.......
<!-- success.html -->
<h1>Payment Successful!</h1>
<p>Thank you for your purchase. Your payment was successful.</p>
<p>Transaction ID: <span id="transaction-id"></span></p>

<script>
  // Extract the transaction ID from the URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const transactionId = urlParams.get('transaction_id');

  // Display the transaction ID on the page
  document.getElementById('transaction-id').textContent = transactionId;
</script>
......
///////
import com.stripe.Stripe;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class StripeService {

    @Value("${stripe.secret.key}")
    private String stripeSecretKey;

    public void initStripe() {
        Stripe.apiKey = stripeSecretKey;
    }

    // Other methods to interact with Stripe API
}

<!-- Your HTML file -->
<!DOCTYPE html>
<html>
<head>
    <script src="https://js.stripe.com/v3/"></script>
</head>
<body>
    <!-- Your payment form and other content here -->
</body>
<script>
    // Your JavaScript code
    const stripe = Stripe('your_publishable_key_here');
</script>
</html>

/////////



.....
?//////

for method 1 token from card details and 
handling payment by own server 

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Charge;
import com.stripe.param.ChargeCreateParams;
import com.stripe.param.PaymentIntentCreateParams;
import com.stripe.param.PaymentIntentConfirmParams;
import com.stripe.model.PaymentIntent;

public class PaymentService {

    private static final String STRIPE_SECRET_KEY = "your_stripe_secret_key_here"; // Replace with your Stripe secret key

    public String processPayment(String token, int amountInCents) {
        try {
            // Set your Stripe secret key
            Stripe.apiKey = STRIPE_SECRET_KEY;

            // Create a charge using the token and the amount
            ChargeCreateParams params = ChargeCreateParams.builder()
                    .setAmount(amountInCents)
                    .setCurrency("usd")
                    .setSource(token)
                    .build();

            // Attempt to create a charge
            Charge charge = Charge.create(params);

            // Check if the charge is successful
            if ("succeeded".equals(charge.getStatus())) {
                return "Payment successful.";
            } else if ("requires_action".equals(charge.getStatus())) {
                // Payment requires further authentication (e.g., 3D Secure)
                String clientSecret = charge.getOutcome().get("client_secret");
                return "requires_action:" + clientSecret; // Return the client secret to the client-side
            } else {
                return "Payment failed.";
            }
        } catch (StripeException e) {
            // Handle any exceptions that occurred during payment processing
            e.printStackTrace();
            return "Payment failed.";
        }
    }

    // Alternatively, you can use Payment Intents for more control over the authentication flow
    public String processPaymentWithPaymentIntent(String token, int amountInCents) {
        try {
            // Set your Stripe secret key
            Stripe.apiKey = STRIPE_SECRET_KEY;

            // Create a PaymentIntent using the token and the amount
            PaymentIntentCreateParams params = PaymentIntentCreateParams.builder()
                    .setAmount(amountInCents)
                    .setCurrency("usd")
                    .addPaymentMethodType("card")
                    .setConfirm(true)
                    .setPaymentMethod(token)
                    .build();

            PaymentIntent paymentIntent = PaymentIntent.create(params);

            // Check if the PaymentIntent requires further authentication (e.g., 3D Secure)
            if ("requires_action".equals(paymentIntent.getStatus())) {
                String clientSecret = paymentIntent.getClientSecret();
                return "requires_action:" + clientSecret; // Return the client secret to the client-side
            } else if ("succeeded".equals(paymentIntent.getStatus())) {
                return "Payment successful.";
            } else {
                return "Payment failed.";
            }
        } catch (StripeException e) {
            // Handle any exceptions that occurred during payment processing
            e.printStackTrace();
            return "Payment failed.";
        }
    }
}


UI ......


<!-- Your HTML file -->
<!DOCTYPE html>
<html>
<head>
    <script src="https://js.stripe.com/v3/"></script>
</head>
<body>
    <!-- Your payment form and other content here -->

    <script>
        // Your JavaScript code
        const stripe = Stripe('your_publishable_key_here');

        // Assuming you have obtained the payment token from Stripe Elements and sent it to the server
        const paymentToken = 'payment_token_from_server';

        // Function to handle the payment response from the server
        async function handlePaymentResponse(response) {
            if (response.startsWith('requires_action:')) {
                const clientSecret = response.replace('requires_action:', '');
                // Handle the OTP flow using handleCardAction
                const result = await stripe.handleCardAction(clientSecret);
                if (result.error) {
                    // Handle any errors that occurred during the OTP flow
                    console.error(result.error.message);
                    displayErrorMessage();
                } else if (result.paymentIntent.status === 'requires_confirmation') {
                    // If further confirmation is needed, you can call confirmCardPayment
                    const confirmedResult = await stripe.confirmCardPayment(clientSecret, {
                        payment_method: result.paymentIntent.payment_method
                    });
                    if (confirmedResult.error) {
                        // Handle any errors that occurred during the confirmation
                        console.error(confirmedResult.error.message);
                        displayErrorMessage();
                    } else if (confirmedResult.paymentIntent.status === 'succeeded') {
                        // Payment was successful after OTP confirmation
                        displaySuccessMessage();
                    }
                }
            } else if (response === 'Payment successful.') {
                // Payment was successful without further authentication
                displaySuccessMessage();
            } else {
                // Payment failed
                displayFailureMessage();
            }
        }

        // Assuming you are using fetch API to make the POST request to your server
        fetch('/process-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ token: paymentToken, amountInCents: 1000 })
        }).then(function(response) {
            return response.text();
        }).then(function(data) {
            // Handle the payment response from the server
            handlePaymentResponse(data);
        }).catch(function(error) {
            // Handle any errors that occurred during the payment processing
            console.error(error);
            displayErrorMessage();
        });
    </script>
</body>
</html>








